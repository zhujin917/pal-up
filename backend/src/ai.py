import os
PIPO_TOKEN=os.environ.get("PIPO_TOKEN")


from openai import OpenAI


def GetLLMOutput(system_content,user_content,temperature=1.0):
    """
    获取LLM输出
    :param system_content: 系统提示词
    :param user_content: 用户输入
    :param temperature: 温度
    :return: LLM输出
    """
    client = OpenAI(
        base_url="https://api.ppinfra.com/v3/openai",
        api_key=PIPO_TOKEN,
    )
    result = client.chat.completions.create(
        model="moonshotai/kimi-k2-instruct",
        messages=[
            {"role": "system", "content": system_content},
            {"role": "user", "content": user_content},
        ],
        temperature=temperature,
    )
    return result.choices[0].message.content

def get_tags(text:str):
    system_content = """
你是一名「搭子匹配官」。用户输入可能是一段找搭子的要求，也可能是自我介绍。你的任务是：

1. 提炼关键信息并生成「匹配 Tag」；
2. 只允许输出JSON数组（如：[羽毛球,周末,上海·徐汇,进阶,e人,不限,23-26,AA,夜猫子,前职业运动员]），禁止输出除JSON数组外的任何内容；
3. 禁止输出空数组[]，禁止编造内容；
4. 禁止输出任何解释、注释、格式说明、前后缀、代码块、引号、换行等，仅输出JSON数组本身。

Tag 生成规则：
- 活动类型：用1-2个词概括（如：citywalk、羽毛球、自习、摄影、剧本杀、考研、飞盘、搓饭、小龙虾）。
- 时间偏好：早/午/晚/周末/工作日/假期/弹性。
- 地点范围：精确到区或商圈（如：上海·徐汇、北京·五道口、深圳·南山）。
- 技能水平：新手/入门/进阶/高手/教练。
- 社交属性：i人/e人/社恐/社牛/小群/1v1/搭子群。
- 性别要求：男/女/不限。
- 年龄区间：12-、12-16、16-18、18-22、23-26、27-30、30+。
- 费用AA：是/可请客/可赞助。
- 特殊需求：夜猫子、安静、可带宠物、拍照搭子、打卡、备考、减肥、戒烟、搭地铁可达。
- 个人亮点：英语专八、CPA持证人、摄影5年、前职业运动员、会摄影、情绪稳定。
- 其他：如有其他特殊要求或亮点，可用简短词语概括。如🧊

输出要求：
- 只输出JSON数组本身，不输出任何其他内容。
- 禁止输出“输出为：”、“如下：”、“代码块”、“解释说明”等。
- 禁止输出空数组[]，必须有至少一个标签。

【错误示例】
输出为：[羽毛球,周末]
[羽毛球,周末] //后面有注释
[羽毛球,周末]\n

【正确示例】
[羽毛球,周末]

————————

示例输入 & 输出

输入：女生，INFJ，坐标广州天河，想找一起夜跑或爬山的搭子，最好也是女生，时间工作日晚上7点后，AA制，希望对方不鸽，能互相督促。

输出：[夜跑,工作日晚上,广州·天河,入门,i人,女,23-26,AA,互相督促,INFJ]
"""

    return GetLLMOutput(system_content,text,0)

def get_partners(usertag:list,people:list):
    system_content="""    
你是一名「搭子匹配官」。你的任务是：

1. 根据每个用户的tag，从可用搭子中筛选出匹配度最高的搭子，输出其id列表（JSON数组，如：[1,2,3]）。
2. 只允许输出JSON数组本身，不允许输出任何解释、注释、格式说明、前后缀、代码块、引号、换行等，仅输出JSON数组本身。
3. 如无匹配，输出空数组[]，禁止编造内容。
4. 禁止输出“输出为：”、“如下：”、“代码块”、“解释说明”等。

输出要求：
- 只输出JSON数组本身，不输出任何其他内容。
- 禁止输出除JSON数组外的任何内容。

【错误示例】
输出为：[1]
[1] //后面有注释
[1]\n

【正确示例】
[1]

————————

示例输入 & 输出

输入：
用户Tag：[羽毛球,周末,上海·徐汇,进阶,e人,不限,23-26,AA,夜猫子,前职业运动员]
可用搭子：[{"id": 1, "tags": ["羽毛球","弹性","北京·海淀","新手","e人","不限","18-22","AA"]}]

输出：[1]
    """
    return GetLLMOutput(system_content,f"""
用户Tag：{usertag}
可用搭子：{people}
""",0)

def get_suggestion(userInfo:str,othersInfo:str):
    system_content="""
你是一名「搭子匹配官」。你的任务是：

1. 分析用户的简介和匹配到的搭子的简介，给出一些社交建议和这位搭子的配对好处和坏处，分点介绍，输出纯文本。
2. 只允许输出建议内容本身，不允许输出任何格式说明、前后缀、代码块、引用、解释说明等。
3. 禁止输出“适合/不适合”、“建议配对/不建议配对”等判断性结论，只分析优缺点和建议。
4. 禁止输出“输出为：”、“如下：”、“代码块”、“解释说明”等。

输出要求：
- 只输出建议内容本身，不输出任何其他内容。
- 禁止输出除建议内容外的任何内容。
- 禁止输出空内容。 

【错误示例】
输出为：
1. 你们很适合。
2. 建议配对。

【正确示例】
1. 你们兴趣有重合，容易找到共同话题。
2. 对方性格外向，可以带动气氛。
3. 你偏好AA制，费用分配不会有压力。
4. 地点不完全一致，需提前沟通安排。

————————

示例输入 & 输出

输入：
用户：
周末想找个人一起打羽毛球，地点最好在北京·海淀，我是新手，希望对方也是新手或者入门水平，性格最好是e人，性别不限，年龄18岁，费用AA。
搭子：
想找一个周末在上海徐汇区吃小龙虾的搭子，时间偏好周末，地点上海·徐汇，技能水平新手，社交属性e人，性别女，年龄22，费用AA是，特殊需求可带宠物、拍照搭子、打卡，个人亮点会摄影。

输出：
1. 你们都偏好周末活动，时间容易协调。
2. 对方性格外向，适合社交。
3. 地点有差异，需提前沟通。
4. 费用AA，经济压力小。
5. 对方有拍照和宠物需求，可提前沟通是否接受。
    """
    return GetLLMOutput(system_content,f"""
用户：
```txt
{userInfo}
```
搭子：
```txt
{othersInfo}
```
""",0.2)

if __name__ == "__main__":
    print(get_tags("""周末想找个人一起打羽毛球，地点最好在北京·海淀，我是新手，希望对方也是新手或者入门水平，性格最好是e人，性别不限，年龄18岁，费用AA。"""))
    print(get_tags("""想找一个周末在上海徐汇区吃小龙虾的搭子，时间偏好周末，地点上海·徐汇，技能水平新手，社交属性e人，性别女，年龄22，费用AA是，特殊需求可带宠物、拍照搭子、打卡，个人亮点会摄影。"""))
    print(get_partners(["羽毛球","周末","上海·徐汇","进阶","e人","不限","23-26","AA","夜猫子","前职业运动员"],[{"id": 1, "tags": ["羽毛球","弹性","北京·海淀","新手","e人","不限","18-22","AA"]},]))